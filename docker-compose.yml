version: "3.9"

services:
  db:
    image: postgres:16
    container_name: fincore_postgres
    restart: always
    environment:
      POSTGRES_USER: fincore_user
      POSTGRES_PASSWORD: fincore_password
      POSTGRES_DB: fincore_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fincore_user -d fincore_db -h localhost -p 5432"]
      interval: 2s
      timeout: 2s
      retries: 10


  backend:
    build: ./backend
    container_name: fincore_backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      DATABASE_URL: postgres://fincore_user:fincore_password@db:5432/fincore_db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery:
    build: ./backend
    container_name: fincore_celery
    command: celery -A backend worker --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      backend:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      DATABASE_URL: postgres://fincore_user:fincore_password@db:5432/fincore_db

  celery-beat:
    build: ./backend
    container_name: fincore_celery_beat
    command: celery -A backend beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    depends_on:
      backend:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      DATABASE_URL: postgres://fincore_user:fincore_password@db:5432/fincore_db

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  frontend:
    build: ./frontend
    container_name: fincore_frontend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    environment:
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      backend:
        condition: service_started

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/ssl/certs:ro
      - ./certs:/etc/ssl/private:ro
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started

volumes:
  frontend_node_modules:
  postgres_data:
